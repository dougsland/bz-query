#!/usr/bin/env python3
import time
import bugzilla
import sys

from datetime import datetime, timedelta, date
from collections import OrderedDict


class colors:
    HEADER = "\033[93m"
    END = "\033[0m"
    BOLD = "\033[1m"


URL = "bugzilla.redhat.com"
bzapi = bugzilla.Bugzilla(URL)

query = bzapi.build_query(
    product="OpenShift Container Platform",
    component="Networking",
    include_fields=[
        "id",
        "priority",
        "severity",
        "assigned_to",
        "creation_time",
        "component",
        "sub_component",
        "target_release",
        "summary",
        "status",
    ],
)
# uncomment if looking for specific ovn-kubernetes
# sub_component="ovn-kubernetes")

rh_developers = [
    "akaris",
    "bpickard",
    # "bnemec",
    "cdc",
    # "cstabler",
    # "dougsland",
    "ffernand",
    "jcaamano",
    "jluhrsen",
    "jtanenba",
    "mcambria",
    "mkennell",
    "mmahmoud",
    "npinaeva",
    "obraunsh",
    "pdiak",
    "pepalani",
    "rravaiol",
    "surya",
]

developer = dict(
    [
        (
            f"{d}@redhat.com",
            {
                "points": 0,
                "number_of_bz": 0,
                "number_of_ovnk_bz": 0,
                "number_of_osdn_bz": 0,
                "number_of_others_bz": 0,
                "bz_in_new": 0,
                "bz_in_assigned": 0,
                "bz_in_post": 0,
                "bz_urls": [],
            },
        )
        for d in rh_developers
    ]
)

# random numbers to weight severity, 10 is max and 1 is low
severity_weight = {"urgent": 10, "high": 5, "medium": 3, "low": 1, "unspecified": 1}

# random numbers to weight priority, 100 is max and 1 is low
priority_weight = {"urgent": 100, "high": 30, "medium": 10, "low": 5, "unspecified": 1}

query["bug_status"] = ["ASSIGNED", "NEW", "POST"]

# Bugzilla has a limit max of return, setting no limit
query["limit"] = 0

t1 = time.time()
bugs = bzapi.query(query)
t2 = time.time()
print("Found %d bugs with our query" % len(bugs))
print("Query processing time: %s" % (t2 - t1))

bugs_new_state_more_than_10days = {}
count_bugs_new_status_more_than_10days = 0

for bug in bugs:
    if bug.assigned_to not in developer:
        continue

    if bug.status == "NEW":
        developer[bug.assigned_to]["bz_in_new"] += 1

        # Bugs in NEW state for more than 10 days
        creation_time = datetime.strptime(str(bug.creation_time), "%Y%m%dT%H:%M:%S")
        if (creation_time + timedelta(days=10)) <= datetime.now():
            bugs_new_state_more_than_10days[bug.id] = {
                "summary": bug.summary,
                "url": "https://bugzilla.redhat.com/show_bug.cgi?id=" + str(bug.id),
                "creationdate": creation_time,
                "status": bug.status,
                "component": bug.component,
                "target_release": bug.target_release,
                "sub_component": bug.sub_component,
            }
            count_bugs_new_status_more_than_10days += 1

    if bug.status == "ASSIGNED":
        developer[bug.assigned_to]["bz_in_assigned"] += 1

    if bug.status == "POST":
        developer[bug.assigned_to]["bz_in_post"] += 1

    developer[bug.assigned_to]["number_of_bz"] += 1
    if bug.sub_component == "ovn-kubernetes":
        developer[bug.assigned_to]["number_of_ovnk_bz"] += 1
    elif  bug.sub_component == "openshift-sdn":
        developer[bug.assigned_to]["number_of_osdn_bz"] += 1
    else:
        developer[bug.assigned_to]["number_of_others_bz"] += 1

    developer[bug.assigned_to]["bz_urls"].append(
        "https://bugzilla.redhat.com/show_bug.cgi?id=" + str(bug.id)
    )
    developer[bug.assigned_to]["points"] += (
        severity_weight[bug.severity] + priority_weight[bug.priority]
    )

# Sorting the list by points field
ordered_by_points = OrderedDict(sorted(developer.items(), key=lambda x: x[1]["points"]))


if len(sys.argv) == 2 and "old-bugs" in sys.argv[1]:
    print(
        colors.HEADER
        + "\nBugs in NEW state for more than 10 days: %s"
        % count_bugs_new_status_more_than_10days
        + colors.END
    )
    print(
        colors.HEADER
        + "Good candidates for needinfo to owner asking if need help or find another assignee"
        + colors.END
    )
    print(colors.BOLD + "================================================" + colors.END)
    for k, v in bugs_new_state_more_than_10days.items():
        print("Summary: %s" % v["summary"])
        print("  Creation date: %s" % v["creationdate"])
        print("  Status: %s" % v["status"])
        print("  Target Release: %s" % v["target_release"])
        print("  Component: %s" % v["component"])
        print("  Sub-Component: %s" % v["sub_component"])
        print("  Bug URL: %s\n" % v["url"])

    sys.exit(0)

# Rank list starts with 1, which means developer with less overloaded at moment
rank = 1

print(
    colors.HEADER
    + "\nRank of developer less overloaded (today) [%s]:" % date.today()
    + colors.END
)
print(
    colors.BOLD
    + "========================================================"
    + colors.END
)
for k, v in list(ordered_by_points.items()):
    print("#%s Developer: %s" % (rank, k))
    print("  Rank Points:", v["points"])
    print("  Number of Bugs:", v["number_of_bz"])
    print("  Number of OVNK Bugs:", v["number_of_ovnk_bz"])
    print("  Number of OSDN Bugs:", v["number_of_osdn_bz"])
    print("  Number of other comp Bugs:", v["number_of_others_bz"])
    print("  Number of Bugs as NEW:", v["bz_in_new"])
    print("  Number of Bugs as ASSIGNED:", v["bz_in_assigned"])
    print("  Number of Bugs as POST:", v["bz_in_post"])
    print("  BugUrls:", v["bz_urls"])
    print("")
    rank += 1

print(colors.HEADER + "\nBugzilla status explained:" + colors.END)
print(colors.BOLD + "=============================" + colors.END)
print(" - NEW: Bug need to be triagged or work not started.")
print(" - ASSIGNED: Bug has been triagged and developer started working.\n")

print(" - POST: Bug has a possible solution and the patch is under review.")
print("   ATTENTION: might need developer rework the solution.\n")

print(
    " - MODIFIED: patch has being commited upstream/downstream, developers are all set."
)
print(
    "   Usually ERRATA system moves to ON_QA as soon the Bugzilla report",
    "is attached to an Errata ticket.\n",
)

print(
    " - ON_QE: Quality Engineers need to test and verify if the solution",
    "worked. As soon they ack the solution\n\t and move the bug to VERIFIED,",
    "Errata system can scheduled and SHIP the new release to users.",
)
